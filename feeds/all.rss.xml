<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Jim W. Kennington</title><link>/</link><description></description><lastBuildDate>Sun, 15 Mar 2020 00:00:00 -0500</lastBuildDate><item><title>Algebra Ladder</title><link>/blog/algebra-ladder/</link><description>&lt;p&gt;I first encountered a diagram of algebraic structures at the end of Jeevanjee's second chapter, 
"Vector Spaces", which elegantly summarizes the high-level differences in structure between sets, 
vector spaces, and inner product spaces. &lt;/p&gt;
&lt;p&gt;&lt;a href='#jeevanjeeIntroductionTensorsGroup2015' id='ref-jeevanjeeIntroductionTensorsGroup2015-1'&gt;Jeevanjee (2015)&lt;/a&gt; 
This diagram was immensely helpful to me, in that it helped show the relationships between various 
commonly used objects in mathematical physics. As I've encountered new structures, I've attempted 
to augment this map along two dimensions: a &lt;em&gt;structure&lt;/em&gt; dimension that aims to measure the number 
of attributes an algebraic object has, and a &lt;em&gt;specificity&lt;/em&gt; dimension which measures the amount 
of constraints placed on each attribute. &lt;/p&gt;
&lt;p&gt;For instance, a Magma has more structure than a set, because a new attribute - a binary operator - has 
been added. A group, though, is roughly similar in structure to a magma, but has more properties of 
the binary operator specified, such as associativity, inverses, and identity, which make it more 
specific (and the magma more general). &lt;a href='#romanAdvancedLinearAlgebra2007' id='ref-romanAdvancedLinearAlgebra2007-1'&gt;Roman (2007)&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="Algebra Ladder" src="/images/algebra-ladder-small.png" /&gt;
Figure 1. Relationship of various algebraic structures. &lt;a href="/images/algebra-ladder.png"&gt;Larger image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The diagram above aims to show how an algebra is constructed from a set, though admittedly omits 
several algebraic structures along the way. I've attempted to include the most primary objects used or
seen in mathematical physics. I should also note, this diagram is intended as a quick-reference, and
isn't a substitute for opening Hungerford! &lt;a href='#hungerfordAlgebra2003' id='ref-hungerfordAlgebra2003-1'&gt;Hungerford (2003)&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;
&lt;h3&gt;Bibliography&lt;/h3&gt;
&lt;p id='hungerfordAlgebra2003'&gt;Thomas&amp;nbsp;W. Hungerford.
&lt;em&gt;Algebra&lt;/em&gt;.
Number&amp;nbsp;73 in Graduate Texts in Mathematics.
&lt;span class="bibtex-protected"&gt;Springer&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;New York&lt;/span&gt;, corr. 8th print edition, 2003.
ISBN 978-0-387-90518-1 978-3-540-90518-9. &lt;a class="cite-backref" href="#ref-hungerfordAlgebra2003-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='jeevanjeeIntroductionTensorsGroup2015'&gt;Nadir Jeevanjee.
&lt;em&gt;An Introduction to Tensors and Group Theory for Physicists&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Springer Science+Business Media&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;New York, NY&lt;/span&gt;, 2015.
ISBN 978-3-319-14793-2. &lt;a class="cite-backref" href="#ref-jeevanjeeIntroductionTensorsGroup2015-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='romanAdvancedLinearAlgebra2007'&gt;Steven Roman.
&lt;em&gt;Advanced Linear Algebra&lt;/em&gt;.
Number&amp;nbsp;135 in Graduate Texts in Mathematics.
&lt;span class="bibtex-protected"&gt;Springer&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;New York&lt;/span&gt;, 3rd ed edition, 2007.
ISBN 978-0-387-72828-5. &lt;a class="cite-backref" href="#ref-romanAdvancedLinearAlgebra2007-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Kennington</dc:creator><pubDate>Sun, 15 Mar 2020 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2020-03-15:/blog/algebra-ladder/</guid><category>Maths</category><category>maths</category><category>algebra</category><category>group</category></item><item><title>Loading Gravitational Wave Data with PyCBC</title><link>/blog/loading-gravitational-wave-data-with-pycbc/</link><description>&lt;p&gt;This post is the first in a series of in-depth examples for analyzing gravitational wave data in Python, 
using the PyCBC package. There is also a notebook-version of this post, available &lt;a href="https://github.com/JWKennington/pycbc-examples"&gt;here&lt;/a&gt;,
in a repo of PyCBC examples.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;In order to analyze observed gravitational waves, we must first find the data containing the signal. This 
example shows how to explore the Catalog of observed mergers available via the Gravitational Wave Open 
Science Center (GWOSC). Though this example focuses on the Python API, the list of available mergers can also 
be found on the web at the following &lt;a href="https://www.gw-openscience.org/catalog/GWTC-1-confident/html/"&gt;url&lt;/a&gt;.&lt;/p&gt;
&lt;p style="background: #e6e6e6; border-radius: 10px; padding: 10px"&gt;
    &lt;i&gt;&lt;b&gt;Developer Note:&lt;/b&gt;&lt;/i&gt;&lt;br&gt;
    The below example also uses the &lt;a href="https://github.com/JWKennington/gravtools"&gt;gravtools&lt;/a&gt; package, which 
    is just a small collection of convenience functions and utilities.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pycbc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gravtools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MergerParameters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Observatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;merger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Exploring the Catalog&lt;/h2&gt;
&lt;p&gt;A common structure for grouping astonomical data, a Catalog is a sensible concept for a programmatic API. 
The PyCBC package has taken this approach, which is shown below using the &lt;code&gt;Catalog&lt;/code&gt; class.&lt;/p&gt;
&lt;h3&gt;The &lt;code&gt;Catalog&lt;/code&gt; Class&lt;/h3&gt;
&lt;p&gt;The PyCBC Catalog class is capable of using the GWOSC data api to see essentially the same information
contained in the link above (albeit through JSON instead of HTML). Under the hood, PyCBC relies on AstroPy
data-access file-download utilities.&lt;/p&gt;
&lt;p&gt;We can create a catalog simply by creating an instance of the &lt;code&gt;Catalog&lt;/code&gt; class, and specifying a data source. 
In this case we specify &lt;code&gt;'gwtc-1'&lt;/code&gt; which refers to the Gravitational-Wave Transient Catalog 1. This catalog 
consists of compact binary mergers observed in the O1 and O2 runs, and is also the default catalog (so you don't 
need to specify it, though we do for clarity).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Catalog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gwtc-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Where are the &lt;code&gt;Merger&lt;/code&gt;s stored?&lt;/h3&gt;
&lt;p&gt;The Catalog class is an iterable with respect to the names of the mergers in the catalog, so you can pick your favorite 
technique to iterate over the available merger names (we use the list coercion function below).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Get names of mergers in catalog &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;merger_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Catalog class is iterable, any collection coercion will suffice&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;merger_names&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GW150914&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GW151012&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GW151226&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The Merger data associated to the name is stored in the &lt;code&gt;mergers&lt;/code&gt; attribute of the &lt;code&gt;Catalog&lt;/code&gt; instance, which 
is a dictionary keyed by the name of the merger (which we examined above). &lt;/p&gt;
&lt;h3&gt;Basic Merger Properties&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Merger&lt;/code&gt; object retrieved from the Catalog contains all the estimated parameters of the waveform. Each 
attribute may be accessed directly, but the preferred way is through the "median1d" method of the Merger class. 
Keep in mind that these parameters are in the &lt;em&gt;source&lt;/em&gt; frame, not the &lt;em&gt;detector&lt;/em&gt; frame.&lt;/p&gt;
&lt;p style="background: #e6e6e6; border-radius: 10px; padding: 10px"&gt;
    &lt;i&gt;&lt;b&gt;Developer Note:&lt;/b&gt;&lt;/i&gt;&lt;br&gt;
    Unfortunately, the merger-parameter attributes of the Merger instance are not inspectable in a code 
    editor due the way they are set during instantiation (using the setattr function). The 
    &lt;i&gt;gravtools.MergerParameters&lt;/i&gt; enumeration contains all the relevant parameter names, 
    and _is_ inspectable, so we use it below.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mergers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GW150914&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# convenient summary string from gravtools&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;merger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Merger[GW150914](Mass1=35.6, Mass2=30.6, FinalSpin=0.69)&amp;#39;&lt;/span&gt;


&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Log the names of the mergers in the catalog&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mergers in catalog:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;merger_names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mergers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# load the Merger object by name&lt;/span&gt;
        &lt;span class="c1"&gt;# the step above can also be done by instantiating a Merger object directly, e.g. catalog.Merger(&amp;#39;GW150914&amp;#39;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Print some merger info by accessing parameters through the &amp;quot;median1d&amp;quot; method&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;: M1=&lt;/span&gt;&lt;span class="si"&gt;{:2.0f}&lt;/span&gt;&lt;span class="s1"&gt; M2=&lt;/span&gt;&lt;span class="si"&gt;{:2.0f}&lt;/span&gt;&lt;span class="s1"&gt; z=&lt;/span&gt;&lt;span class="si"&gt;{:2.2f}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;median1d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MergerParameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mass1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;     &lt;span class="c1"&gt;# m.mass1&lt;/span&gt;
                                                            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;median1d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MergerParameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mass2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;     &lt;span class="c1"&gt;# m.mass2&lt;/span&gt;
                                                            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;median1d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MergerParameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Redshift&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="c1"&gt;# m.redshift&lt;/span&gt;
&lt;span class="n"&gt;Mergers&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;GW150914&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt; &lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.09&lt;/span&gt;
    &lt;span class="n"&gt;GW151012&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.21&lt;/span&gt;
    &lt;span class="n"&gt;GW151226&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.09&lt;/span&gt;
    &lt;span class="n"&gt;GW170104&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.19&lt;/span&gt;
    &lt;span class="n"&gt;GW170608&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.07&lt;/span&gt;
    &lt;span class="n"&gt;GW170729&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt; &lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.48&lt;/span&gt;
    &lt;span class="n"&gt;GW170809&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.20&lt;/span&gt;
    &lt;span class="n"&gt;GW170814&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.12&lt;/span&gt;
    &lt;span class="n"&gt;GW170817&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;
    &lt;span class="n"&gt;GW170818&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt; &lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.20&lt;/span&gt;
    &lt;span class="n"&gt;GW170823&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.34&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Merger Strain&lt;/h2&gt;
&lt;p&gt;Though a Merger object loads several scalar parameters once instantiated, it does not automatically load the 
timeseries of strain data (for efficiency of the API). It is possible, however, and quite easy to load the 
strain timeseries around the event. The below code shows how to load the waveform data. We begin by choosing a 
specific merger from the catalog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Pick a merger from the catalog&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mergers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GW170823&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;The &lt;code&gt;TimeSeries&lt;/code&gt; Class&lt;/h3&gt;
&lt;p&gt;The time series data containing the merger waveform is returned as an instance of the &lt;code&gt;TimeSeries&lt;/code&gt; class. Below, 
we show how to load the strain data, as well as how to do some useful manipulations.&lt;/p&gt;
&lt;p style="background: #e6e6e6; border-radius: 10px; padding: 10px"&gt;
    &lt;i&gt;&lt;b&gt;Developer Note:&lt;/b&gt;&lt;/i&gt;&lt;br&gt;
    The &lt;i&gt;pycbc.TimeSeries&lt;/i&gt; class, which contains the merger strain data (as mentioned above), is a thin wrapper 
    around a numpy or pycuda array supporting many of the common array interface features, such as slicing. There is 
    also additional metadata, including the GPS starting and ending time of the waveform, as well as the time 
    interval between adjacent values in the array.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Query the strain timeseries for the merger&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ifo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Observatory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LIGOHanford&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# the &amp;quot;ifo&amp;quot; argument refers to the observatory that recorded the strain&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Print the boundaries of the timeseries&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Duration=&lt;/span&gt;&lt;span class="si"&gt;{:.0f}&lt;/span&gt;&lt;span class="s1"&gt;s Interval=&lt;/span&gt;&lt;span class="si"&gt;{:.1e}&lt;/span&gt;&lt;span class="s1"&gt;s Start=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; End=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delta_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                                                 &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gps_to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                                                                 &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gps_to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_time&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Print the size of the underlying array&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Array Size: &lt;/span&gt;&lt;span class="si"&gt;{:,d}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Supports Slicing&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Array Size: &lt;/span&gt;&lt;span class="si"&gt;{:,d}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;

&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.4e-04&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;
&lt;span class="n"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;131&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;072&lt;/span&gt;
&lt;span class="n"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;Physics Remark:&lt;/h4&gt;
&lt;p&gt;The &lt;em&gt;strain&lt;/em&gt; recorded in the above timeseries basically represents the degree to which space has expanded 
or contracted along the path of the interferometer:
&lt;/p&gt;
&lt;div class="math"&gt;$$h = \frac{\Delta L}{L},\quad \Delta L = L_x - L_y$$&lt;/div&gt;
&lt;p&gt;
Where &lt;span class="math"&gt;\(L\)&lt;/span&gt; is the original length of the detector, and the change is measured as the difference in the 
detector arms. For more information on the experimental setup, see the excellent review, 
&lt;a href="https://link.springer.com/article/10.1007/s41114-016-0002-8"&gt;Interferometer techniques for gravitational wave detection&lt;/a&gt; 
by Bond, Brown, Freise and Strain.&lt;/p&gt;
&lt;h3&gt;Visualize the Time-Domain&lt;/h3&gt;
&lt;p&gt;This section is devoted to visualizing the Time-domain strain. We use the &lt;code&gt;sample_times&lt;/code&gt; attribute of 
the &lt;code&gt;TimeSeries&lt;/code&gt; class for the x-coordinates of the plot, and simply pass the &lt;code&gt;TimeSeries&lt;/code&gt; object itself 
as the y-coordinates (since it is an array). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Import some plotting tools from the bokeh package&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.plotting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;output_notebook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;
&lt;span class="n"&gt;output_notebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hide_banner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# for Jupyter usage, otherwise it will write out files&lt;/span&gt;

&lt;span class="c1"&gt;# Create the figure&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Time-Domain data around &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;files&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eventName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
           &lt;span class="n"&gt;x_axis_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_axis_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Time (s)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_axis_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Strain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="n"&gt;plot_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plot_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Plot the line-plot data&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample_times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# Display&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="GWaveData" src="/images/gwave-data.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;p style="background: #e6e6e6; border-radius: 10px; padding: 10px"&gt;
    &lt;i&gt;&lt;b&gt;Developer Note:&lt;/b&gt;&lt;/i&gt;&lt;br&gt;
    Plotting in Python is notoriously subjective; there are many competing libraries that all deserve proper attention, such as plotly, bokeh, plotnine, altair, and others (excluding matplotlib). There are meta-plotting libraries as well that sit atop these, such as holoviews. However, we choose to use Bokeh here primarily due to the simple interface, and clean style.
&lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;This post is based on the official &lt;a href="https://pycbc.org/tutorials/"&gt;PyCBC tutorials&lt;/a&gt;, and is cited in the example 
repository's &lt;a href="https://github.com/JWKennington/pycbc-examples/blob/master/README.md"&gt;README&lt;/a&gt;. &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Kennington</dc:creator><pubDate>Sat, 12 Oct 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2019-10-12:/blog/loading-gravitational-wave-data-with-pycbc/</guid><category>Physics</category><category>physics</category><category>gravity</category></item><item><title>Quick Python Setup</title><link>/blog/quick-python-setup/</link><description>&lt;h4&gt;Motivation&lt;/h4&gt;
&lt;p&gt;Python has increased in popularity to near ubiquity in the past five years. While the Python community (correctly) professes 
simplicity as a major accomplishment of the language, I still get a lot of questions about how to get a python environment 
setup properly. There are some lengthy guides out there on this - this post will aim to summarize and explain the relevant 
components to getting started.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: skip to bottom if you want quick install commands&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;The Pieces&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/strong&gt; is a language. Combination of syntax rules, semantics, keyword commands, an interpreter that can execute code abiding the rules. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;package&lt;/em&gt;&lt;/strong&gt; is a self-contained, reusable piece of python code. Often a directory containing one or more python files (or more subdirectories). One typically packages python code in order to share it. There are some packages that come with the language itself (called "builtin") and others that users can install optionally (called "3rd party" packages)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;environment&lt;/em&gt;&lt;/strong&gt; is a combination of a Python installation and a collection of packages. Pip can only install python packages - not any precompiled binaries (conda can do that!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;conda&lt;/em&gt;&lt;/strong&gt; is a 3rd party package manager, and frankly I find it superior to pip in almost every way. It can install packages in a variety of languages, precompiled binaries (meaning numpy will install &lt;em&gt;much&lt;/em&gt; faster).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;miniconda&lt;/em&gt;&lt;/strong&gt; is an environment that contains bare-bones packages only, including the conda package manager.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Anaconda&lt;/em&gt;&lt;/strong&gt; is an environment that contains a &lt;em&gt;large&lt;/em&gt; amount of packages, aimed at scientific computing (such as numpy, scipy, etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;The Process&lt;/h4&gt;
&lt;p&gt;Recall that this guide is designed for novice-users, or as a reference for other users. I will assume that the user is 
able to use a desktop GUI (not headless).&lt;/p&gt;
&lt;h5&gt;Using Pip (not recommended)&lt;/h5&gt;
&lt;p&gt;Install python using the &lt;a href="https://www.python.org/downloads/"&gt;os-specific Python installation programs&lt;/a&gt;. I recommend 
installing the latest version of Python 3.*, since most new packages do not include support for older versions of 2.7. 
The program will install all the base packages you require, including pip. At which point you can open up a command line 
(terminal on Mac or CMD on Win), and use commands like &lt;code&gt;pip install x&lt;/code&gt; to install a package named "x" (for more pip commands 
see the &lt;a href="https://pip.pypa.io/en/stable/quickstart/"&gt;docs&lt;/a&gt;).&lt;/p&gt;
&lt;h5&gt;Using Conda (recommended)&lt;/h5&gt;
&lt;p&gt;Install &lt;strong&gt;miniconda&lt;/strong&gt; using the &lt;a href="https://docs.conda.io/en/latest/miniconda.html"&gt;install program&lt;/a&gt;. Once installed, create 
your Python environment by doing the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;conda create --name env1 python=3.7&lt;/code&gt; (you can replace "env1" with the preferred name of the environment, probably something related to your current coding project. You can also replace "3.7" with whatever version of python you want to use)&lt;/li&gt;
&lt;li&gt;This will do some thinking then print a list of packages that will be installed, accept this by typing &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Your environment is created! You can activate this environment (on Mac/Linux by using &lt;code&gt;source activate env1&lt;/code&gt; or on Win by using &lt;code&gt;activate env1&lt;/code&gt;). &lt;/li&gt;
&lt;li&gt;Now that you are "in" the environment you created, you can install other packages into the environment using &lt;code&gt;conda install x&lt;/code&gt; to install package "x"&lt;/li&gt;
&lt;li&gt;You can also install other packages from a text file using &lt;code&gt;conda install --file requirements.txt&lt;/code&gt;, where "requirements.txt" is the requirements file containing a list of package names (one on each line).
&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are, of course, more complicated options available using conda, for those see 
the &lt;a href="https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf"&gt;conda cheat sheet&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;TL;DR - Get Python Setup&lt;/h4&gt;
&lt;p&gt;The below steps give a quick, general-purpose environment setup.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://docs.conda.io/en/latest/miniconda.html"&gt;miniconda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conda create --name env1 python=3.7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source activate env1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conda install numpy scipy pandas&lt;/code&gt;
&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The "env1" directory will be installed in the user x directory (&lt;code&gt;~/.anaconda&lt;/code&gt; on Mac or &lt;code&gt;C:\Users\x\.anaconda&lt;/code&gt; on Win). 
If you are using a python editor (like PyCharm) that wants to be "pointed" to the environment, then you will configure 
it to look at the "env1" directory under the ".anaconda" folder.&lt;/p&gt;
&lt;h4&gt;Conda env shortcut&lt;/h4&gt;
&lt;p&gt;It is also possible to create a clickable shortcut to the conda environment, see &lt;a href="https://anaconda.org/anaconda/console_shortcut"&gt;the docs&lt;/a&gt; for more.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Kennington</dc:creator><pubDate>Tue, 02 Jul 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2019-07-02:/blog/quick-python-setup/</guid><category>Python</category><category>python</category><category>comp-physics</category></item><item><title>Book Review: Tensors and Group Theory for Physicists (Jeevanjee)</title><link>/blog/book-review-tensors-and-group-theory-for-physicists-jeevanjee/</link><description>&lt;h5&gt;Summary&lt;/h5&gt;
&lt;p&gt;I picked up a copy of Nadir Jeevnajee's &lt;a href="https://amzn.to/2XzHfp2"&gt;An Introduction to Tensors and Group Theory for Physicists&lt;/a&gt;
a few months ago with the intent of skimming through and spending most of my time in reference texts. To my pleasant
surprise, I found this text to be self contained - requiring little to no references. The presentation is at once 
mathematically rigorous and physically intuitive, alluding to well-known examples from physics throughout. I've found this
text to be such a great introduction to tensors that I have even recommended it to computer-scientist colleagues of mine
who have no interest in physics. I whole-heartedly recommend it to anyone interesting in becoming more familiar with tensors
and elementary group / representation theory.&lt;/p&gt;
&lt;h5&gt;Part I: Tensors&lt;/h5&gt;
&lt;p&gt;The presentation of tensors as multilinear functions achieves a remarkable degree of exposition, and arrives at all the 
more heuristic definitions of tensors as derived from the simple multilinear-map definitions. This gave the impression
of a more solid ground basis for many subsequent tensorial notations and usages.&lt;/p&gt;
&lt;p&gt;The derivation of commonly assumed definitions is most satisfying. Specifically, the definitions of the adjoint operator
and tensor product are much simpler than the more commonly given "behavioral" definitions presented in physics. I appreciated
the rigorous yet succinct treatment of the tensor and wedge products.&lt;/p&gt;
&lt;h5&gt;Part II: Group Theory&lt;/h5&gt;
&lt;p&gt;Though I am still working through the last part of chapter 6, I must admit I found this section to be superbly clear. The 
methodical, sequential development of topics in Lie theory were especially thoughtful. The presentation of Lie algebra elements
as derivatives of Lie group elements yielded the conventional tangent-space definitions nicely. &lt;/p&gt;
&lt;p&gt;At the same time, Jeevanjee also presents many common groups and the important relations between them, such as the double-cover 
relationship of SU(2) and SO(3). He also presents the higher-level relations between the various common groups, such as the
quantum implications of the Lorentz (improper) group. Good stuff!&lt;/p&gt;
&lt;h5&gt;Solutions&lt;/h5&gt;
&lt;p&gt;As I read through the text I'm compiling some solutions. Much to my fortunate suprise, Dr. Jeevanjee has welcomed these 
solutions as contributions to his solutions manual which he has published on 
Overleaf here: &lt;a href="https://www.overleaf.com/read/smdmygtbwtxk"&gt;Solutions Manual&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Kennington</dc:creator><pubDate>Fri, 28 Jun 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2019-06-28:/blog/book-review-tensors-and-group-theory-for-physicists-jeevanjee/</guid><category>Books</category><category>physics</category><category>linear algebra</category><category>group theory</category><category>tensors</category></item><item><title>Gravity of a Photon</title><link>/blog/gravity-of-a-photon/</link><description>&lt;p&gt;A friend, who focuses primarily on experimental particle physics, recently asked me an interesting question about gravity.
Specifically, he asked how the presence of electromagnetic fields impacts the gravitational field. Applying some modern-physics
reasoning, he proposed that electromagnetic fields should exert gravitational influence because photons have momentum that
can be viewed as mass in special relativity, and should interact gravitationally. I found this idea interesting, if a bit
interpretive, and answered with the precise formulation of the impact of the electromagnetic field on the curvature tensor.
He suggested I post this response in case anyone else finds it interesting; to colleagues working in classical or quantum gravity
this might appear a bit pedestrian.&lt;/p&gt;
&lt;p&gt;The Einstein field equation (below) is arguably the most famous equation in gravity theory, second perhaps to Newton's inverse-square
law, and despite its seemingly-complex tensorial notation, expresses a beautifully elegant and simple concept. For those less
familiar, Einstein's general relativity reformulates gravitational interaction as a manifestation of the curvature of spacetime.
Specifically, Einstein's formulation makes concrete the relationship between the curvature of spacetime and the mass-energy content
 of spacetime &lt;a href='#misnerGravitation2017' id='ref-misnerGravitation2017-1'&gt;Misner et al. (2017)&lt;/a&gt;.&lt;/p&gt;
&lt;div class="math"&gt;$$R_{\mu\nu} - \frac{1}{2}Rg_{\mu\nu} + \Lambda g_{\mu\nu} = \frac{8\pi G}{c^4}T_{\mu\nu} \quad\quad\quad(1)$$&lt;/div&gt;
&lt;p&gt;In the above equation (Einstein equation), the left-hand side contains terms related to curvature of spacetime, like the Ricci
tensor &lt;span class="math"&gt;\(R_{\mu\nu}\)&lt;/span&gt;  and the metric &lt;span class="math"&gt;\(g_{\mu\nu}\)&lt;/span&gt;. The right-hand side contains terms related to energy and matter content,
specifically &lt;span class="math"&gt;\(T_{\mu\nu}\)&lt;/span&gt;. This latter term, called the &lt;em&gt;stress-energy&lt;/em&gt; tensor, is where the connection to the electromagnetic
field appears.&lt;/p&gt;
&lt;p&gt;Various forms of matter contribute differently to the stress-energy tensor, and electromagnetic energy is no exception. The
equation below outlines the way in which the electromagnetic field contributes to the stress energy density of a particular
area of spacetime.&lt;/p&gt;
&lt;div class="math"&gt;$$T^{\mu\nu} = \frac{1}{\mu_0}\left[F^{\mu\alpha}F^{\nu}{}_{\alpha} - \frac{1}{4} g^{\mu\nu}F_{\alpha\beta}F^{\alpha\beta} \right] \quad\quad\quad(2)$$&lt;/div&gt;
&lt;p&gt;Where &lt;span class="math"&gt;\(F_{\mu\nu}\)&lt;/span&gt; is the electromagnetic field tensor, also called the &lt;em&gt;Faraday&lt;/em&gt; tensor, where &lt;span class="math"&gt;\(\mathbf{E} = E^i e_i\)&lt;/span&gt; and
&lt;span class="math"&gt;\(\mathbf{B} = B^i e_i\)&lt;/span&gt; are the familiar electric and magnetic vector fields. Note that in the below, I adopt the &lt;span class="math"&gt;\(c=1\)&lt;/span&gt;
convention for convenience &lt;a href='#carrollSpacetimeGeometryIntroduction2013' id='ref-carrollSpacetimeGeometryIntroduction2013-1'&gt;Carroll (2013)&lt;/a&gt;.&lt;/p&gt;
&lt;div class="math"&gt;$$F^{\mu\nu} =
\begin{bmatrix}
    0 &amp;amp; -E^x &amp;amp; -E^y &amp;amp; -E^z \\
    E^x &amp;amp; 0 &amp;amp; -B^z &amp;amp; B^y \\
    E^y &amp;amp; B^z &amp;amp; 0 &amp;amp; -B^x \\
    E^z &amp;amp; -B^y &amp;amp; B^x &amp;amp; 0 \\
\end{bmatrix} \quad\quad\quad(3)$$&lt;/div&gt;
&lt;p&gt;Thus, equation (2) tells us how the electromagnetic fields we are familiar with, namely &lt;span class="math"&gt;\(\mathbf{E}\)&lt;/span&gt; and &lt;span class="math"&gt;\(\mathbf{B}\)&lt;/span&gt;,
contribute to the energy density of a region of spacetime. Then equation (1) builds on that result to relate the
electromagnetic fields to the curvature of spacetime, which as Einstein revealed, manifests as the gravitational field. So
yes, the conventional electromagnetic fields, and the photons that constitute them, impact the gravitational field despite
having no rest mass!&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%&amp;#64;#$&amp;#64;#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%&amp;#64;#$&amp;#64;#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;hr&gt;
&lt;h3&gt;Bibliography&lt;/h3&gt;
&lt;p id='carrollSpacetimeGeometryIntroduction2013'&gt;Sean Carroll.
&lt;em&gt;Spacetime and &lt;span class="bibtex-protected"&gt;&lt;span class="bibtex-protected"&gt;Geometry&lt;/span&gt;&lt;/span&gt;: &lt;span class="bibtex-protected"&gt;&lt;span class="bibtex-protected"&gt;An Introduction&lt;/span&gt;&lt;/span&gt; to &lt;span class="bibtex-protected"&gt;&lt;span class="bibtex-protected"&gt;General Relativity&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Pearson Education&lt;/span&gt;, 3 edition, 2013. &lt;a class="cite-backref" href="#ref-carrollSpacetimeGeometryIntroduction2013-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='misnerGravitation2017'&gt;Charles&amp;nbsp;W. Misner, Kip&amp;nbsp;S. Thorne, John&amp;nbsp;Archibald Wheeler, and David Kaiser.
&lt;em&gt;Gravitation&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Princeton University Press&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;Princeton, N.J&lt;/span&gt;, 2017.
ISBN 978-0-691-17779-3.
OCLC: on1006427790. &lt;a class="cite-backref" href="#ref-misnerGravitation2017-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Kennington</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2019-06-15:/blog/gravity-of-a-photon/</guid><category>Physics</category><category>physics</category><category>gravity</category></item><item><title>Erasing Efficiently</title><link>/blog/erasing-efficiently/</link><description>&lt;p&gt;I've spent time focusing on the best chalkboards and chalks on my &lt;a href="/pages/tools"&gt;tools page&lt;/a&gt;, but -until recently- I've 
not spent much time thinking about the last part of the process -- erasing. At the suggestion of several colleagues, I 
played around with several different methods of erasing chalk marks to find which is most effective. The results were
decisive. This post outlines the results, and attempts to present a simple test as justification (though my own testing 
was more extensive). &lt;/p&gt;
&lt;p&gt;Of the suggestions I was given, I decided to test the methods listed below. Felt erasers were what I had always used, 
and I think are the standard in many universities across the US. The sponge was an interesting suggestion, in that it has
a similar form factor to conventional felt erasers. I was most skeptical of the microfiber towel suggestion. I 
thought it would feel weird to not have a handle to grab.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://amzn.to/2L9k43X"&gt;Felt Eraser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/2PxWCMc"&gt;Sponge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/2GI8vLH"&gt;Microfiber Towel&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To demonstrate the differences between the methods, I drew a fair amount of horizontal lines in different colors (white, 
blue, yellow, and red). I divided the lines vertically into multiple columns; one column for each method. I took a few 
images after each pass.&lt;/p&gt;
&lt;p&gt;A look at the tools pre-erasing, note that they are all chalk-free!
&lt;img alt="Eraser Tools Pre" src="/images/eraser-tools-pre.png" /&gt;&lt;/p&gt;
&lt;p&gt;The board after a single pass with each tool. Notice how the felt eraser just smeared the existing lines, but they are 
still fully recognizable and distinguishable (bad). The sponge did a little better, but made a terrible noise while in 
contact with the board. Lastly, the microfiber towel surpassed my expectations and the other competitors, erasing nearly 
all trace of the lines in the first pass! Not only does the towel method erase better than the others, but it produces
less dust as well. 
&lt;img alt="After 1 Pass" src="/images/eraser-pass-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;The board after 5 passes with each tool. The felt eraser has closed the gap on the other methods, but still doesn't compare
fully. The microfiber towel method:
&lt;img alt="After 5 Passes" src="/images/eraser-pass-5.png" /&gt;&lt;/p&gt;
&lt;p&gt;A quick look at the tools post erasing. The felt eraser has gathered the chalk in highly-clustered places, whereas the microfiber 
towel has absorbed the chalk in a fairly uniform pattern. This latter observation explains why the towel continues to work
well long after the eraser needs to be cleaned, there's a surface-area advantage!
&lt;img alt="Eraser Tools Post" src="/images/eraser-tools-post.png" /&gt;&lt;/p&gt;
&lt;p&gt;An aside about cleaning up the tools: the microfiber towels are machine-washable (do &lt;em&gt;not&lt;/em&gt; use softener, only dry on low 
or no heat). This is much easier than the felt erasers, which I either had to clap against eachother outdoors, or vacuum 
with a special nozzle on the vacuum cleaner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Winner: Microfiber Towel!&lt;/strong&gt; (I won't go back). If you prefer the form-factor of the felt eraser, wrap it in a microfiber towel!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Kennington</dc:creator><pubDate>Mon, 06 May 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2019-05-06:/blog/erasing-efficiently/</guid><category>Maths</category><category>maths</category><category>tools</category><category>chalk</category></item><item><title>Tensor Type Notation</title><link>/blog/tensor-type-notation/</link><description>&lt;h3&gt;What does type (r, s) mean?&lt;/h3&gt;
&lt;p&gt;I'd like to discuss the notation of the tensor type, commonly denoted &lt;span class="math"&gt;\((r, s)\)&lt;/span&gt; as it relates to the tensor product. Specifically, 
the ordering of the vector spaces and dual vector spaces involved in the product. The order matters since tensors are typically 
categorized by the number of vectors and dual vectors they require as arguments. To avoid ambiguity, for a given tensor &lt;span class="math"&gt;\(T\)&lt;/span&gt;, I will 
denote the number of vector arguments as &lt;span class="math"&gt;\(n_v\)&lt;/span&gt; and the number of dual vector arguments as &lt;span class="math"&gt;\(n_d\)&lt;/span&gt;. &lt;/p&gt;
&lt;h4&gt;Preliminaries&lt;/h4&gt;
&lt;p&gt;Before we begin, recall that the dual vector space &lt;span class="math"&gt;\(V^*\)&lt;/span&gt; is defined as the set of linear functionals from &lt;span class="math"&gt;\(V\rightarrow C\)&lt;/span&gt;, 
where &lt;span class="math"&gt;\(C\)&lt;/span&gt; is the field over which &lt;span class="math"&gt;\(V\)&lt;/span&gt; is a vector space. Note, the dual space &lt;span class="math"&gt;\(V^*\)&lt;/span&gt; is defined in terms of the vector space &lt;span class="math"&gt;\(V\)&lt;/span&gt;. 
For similar reasons, the topic of dual spaces is introduced after the topic of vector spaces - in other words, &lt;strong&gt;epistemologically, 
the dual space follows the vector space&lt;/strong&gt;. I only draw attention to this ordering between the vector space and the dual because 
it informs the aesthetic nature of the notation, as we'll see.&lt;/p&gt;
&lt;h4&gt;Conventions&lt;/h4&gt;
&lt;p&gt;The tensor type &lt;span class="math"&gt;\((r, s)\)&lt;/span&gt; is used to categories tensors based on the number of vectors and dual vectors they consume. Problem is, 
there is a choice to made between the &lt;span class="math"&gt;\(r=n_v\)&lt;/span&gt; or &lt;span class="math"&gt;\(r=n_d\)&lt;/span&gt; conventions - and this choice isn't made consistently. As I mentioned above, 
the epistemological ordering of vectors and dual vectors is unambiguous; dual vectors follow vectors. It therefore seems natural to 
make the first number &lt;span class="math"&gt;\(r\)&lt;/span&gt; equal the number of vector arguments &lt;span class="math"&gt;\(n_v\)&lt;/span&gt;. I'll call this convention the &lt;em&gt;vector first&lt;/em&gt; convention, or 
"VF" for short. Similarly, I'll call the opposite convention, of using the number of dual vectors &lt;span class="math"&gt;\(n_d\)&lt;/span&gt; as the first number &lt;span class="math"&gt;\(r\)&lt;/span&gt;, 
the &lt;em&gt;dual first&lt;/em&gt; convention, or "DF" for short.&lt;/p&gt;
&lt;h4&gt;Usage of Conventions&lt;/h4&gt;
&lt;p&gt;Some sources that use the &lt;em&gt;VF&lt;/em&gt; convention &lt;a href='#jeevanjeeIntroductionTensorsGroup2015' id='ref-jeevanjeeIntroductionTensorsGroup2015-1'&gt;Jeevanjee (2015)&lt;/a&gt;, &lt;a href='#langLinearAlgebra1987' id='ref-langLinearAlgebra1987-1'&gt;Lang (1987)&lt;/a&gt;. Some sources that 
use the &lt;em&gt;DF&lt;/em&gt; convention &lt;a href='#romanAdvancedLinearAlgebra2007' id='ref-romanAdvancedLinearAlgebra2007-1'&gt;Roman (2007)&lt;/a&gt;, &lt;a href='#hallLieGroupsLie2015' id='ref-hallLieGroupsLie2015-1'&gt;Hall (2015)&lt;/a&gt;, &lt;a href='#tuDifferentialGeometryConnections2017' id='ref-tuDifferentialGeometryConnections2017-1'&gt;Tu (2017)&lt;/a&gt;, 
&lt;a href='#leeIntroductionSmoothManifolds2013' id='ref-leeIntroductionSmoothManifolds2013-1'&gt;Lee (2013)&lt;/a&gt;, &lt;a href='#rentelnManifoldsTensorsForms2014' id='ref-rentelnManifoldsTensorsForms2014-1'&gt;Renteln (2014)&lt;/a&gt;, &lt;a href='#dasTensorsMathematicsRelativity2007' id='ref-dasTensorsMathematicsRelativity2007-1'&gt;Das (2007)&lt;/a&gt;, 
&lt;a href='#carrollSpacetimeGeometryIntroduction2013' id='ref-carrollSpacetimeGeometryIntroduction2013-1'&gt;Carroll (2013)&lt;/a&gt;, &lt;a href='#poissonRelativistToolkitMathematics2004' id='ref-poissonRelativistToolkitMathematics2004-1'&gt;Poisson (2004)&lt;/a&gt;, &lt;a href='#misnerGravitation2017' id='ref-misnerGravitation2017-1'&gt;Misner et al. (2017)&lt;/a&gt;, 
&lt;a href='#spivakComprehensiveIntroductionDifferential1999' id='ref-spivakComprehensiveIntroductionDifferential1999-1'&gt;Spivak (1999)&lt;/a&gt;. 
To explicitly make clear the above conventions, the &lt;em&gt;VF&lt;/em&gt; convention 
would define a type &lt;span class="math"&gt;\((r, s)\)&lt;/span&gt; tensor &lt;span class="math"&gt;\(T\)&lt;/span&gt; as
&lt;/p&gt;
&lt;div class="math"&gt;$$T: V_1\times \cdot\cdot\cdot \times V_r \times V^*_1 \times \cdot\cdot\cdot \times V^*_s\rightarrow C$$&lt;/div&gt;
&lt;p&gt; 
where &lt;span class="math"&gt;\(V_{i}=V\)&lt;/span&gt; and &lt;span class="math"&gt;\(V^*_{i}=V^*\)&lt;/span&gt; for all &lt;span class="math"&gt;\(i\)&lt;/span&gt;. On the other hand, the &lt;em&gt;DF&lt;/em&gt; convention would define a type &lt;span class="math"&gt;\((r, s)\)&lt;/span&gt; tensor &lt;span class="math"&gt;\(T\)&lt;/span&gt; as
&lt;/p&gt;
&lt;div class="math"&gt;$$T: V^*_1\times \cdot\cdot\cdot \times V^*_r \times V_1 \times \cdot\cdot\cdot \times V_s\rightarrow C$$&lt;/div&gt;
&lt;p&gt; where again 
&lt;span class="math"&gt;\(V_{I}=V\)&lt;/span&gt; and &lt;span class="math"&gt;\(V^*_{i}=V^*\)&lt;/span&gt; for all &lt;span class="math"&gt;\(i\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Cartesian vs. Tensor Product Notations&lt;/h3&gt;
&lt;p&gt;The usage of Cartesian products to define the domain of &lt;span class="math"&gt;\(T\)&lt;/span&gt; is typically used before introducing the tensor product, 
as it is more familiar. In the Cartesian product notation, the &lt;em&gt;VF&lt;/em&gt; convention places the vector spaces before the dual 
spaces, and in some sense is "aligned" with the way in which the subject is taught. When using the tensor product notation, 
however, this is no longer the case!&lt;/p&gt;
&lt;p&gt;Recall the tensor product of two vector spaces &lt;span class="math"&gt;\(V\)&lt;/span&gt; and &lt;span class="math"&gt;\(W\)&lt;/span&gt; is denoted &lt;span class="math"&gt;\(V\otimes W\)&lt;/span&gt; and is the set of all multilinear functions 
from &lt;span class="math"&gt;\(V^* \times W^* \rightarrow C\)&lt;/span&gt;. Notice how the usage of the tensor product &lt;span class="math"&gt;\(\otimes\)&lt;/span&gt; essentially replaces vector spaces 
with their duals in the Cartesian notation. This "replacement" effect combined with only using the spaces &lt;span class="math"&gt;\(V\)&lt;/span&gt; and &lt;span class="math"&gt;\(V^*\)&lt;/span&gt; amounts 
to reversing the order of the input spaces the domain. For example, the &lt;em&gt;VF&lt;/em&gt; convention would define a type &lt;span class="math"&gt;\((r, s)\)&lt;/span&gt; tensor &lt;span class="math"&gt;\(T\)&lt;/span&gt; 
using the tensor product notation as &lt;/p&gt;
&lt;div class="math"&gt;$$T: V^*_1\otimes \cdot\cdot\cdot \otimes V^*_r \otimes V_1 \otimes \cdot\cdot\cdot \otimes 
V_s\rightarrow C$$&lt;/div&gt;
&lt;p&gt; For good measure, I will also note that the &lt;em&gt;DF&lt;/em&gt; convention would define a type &lt;span class="math"&gt;\((r, s)\)&lt;/span&gt; tensor &lt;span class="math"&gt;\(T\)&lt;/span&gt; using the 
tensor product notation as &lt;/p&gt;
&lt;div class="math"&gt;$$T: V_1\otimes \cdot\cdot\cdot \otimes V_r \otimes V^*_1 \otimes \cdot\cdot\cdot \otimes 
V^*_s\rightarrow C$$&lt;/div&gt;
&lt;p&gt; Notice that these definitions are equivalent to the previous definitions using Cartesian product 
notation, but that now the vector spaces are written first in what we called the &lt;em&gt;dual first&lt;/em&gt; convention, not the &lt;em&gt;vector first&lt;/em&gt; 
convention!&lt;/p&gt;
&lt;h3&gt;Why is &lt;em&gt;DF&lt;/em&gt; convention preferred?&lt;/h3&gt;
&lt;p&gt;It seems that the &lt;span class="math"&gt;\(DF\)&lt;/span&gt; convention has wider usage and appeal; naturally I wonder why. Since it feels natural to align the 
notation with the epistemological order, in other words, to write &lt;span class="math"&gt;\(V\)&lt;/span&gt; before &lt;span class="math"&gt;\(V^*\)&lt;/span&gt;, then I am forced to conclude that the 
mathematical community, with malice of forethought, prefers to base the definition of a type &lt;span class="math"&gt;\((r, s)\)&lt;/span&gt; tensor on the tensor 
product notation, rather than the Cartesian notation, since the former requires that &lt;span class="math"&gt;\(V\)&lt;/span&gt; be written before &lt;span class="math"&gt;\(V^*\)&lt;/span&gt;. I personally 
have no objection to the choice, as it seems sensible.&lt;/p&gt;
&lt;h4&gt;Parting note on terminology&lt;/h4&gt;
&lt;p&gt;In the &lt;em&gt;DF&lt;/em&gt; convention, the number &lt;span class="math"&gt;\(r\)&lt;/span&gt; is often referred to as the &lt;em&gt;covariant&lt;/em&gt; number and the number &lt;span class="math"&gt;\(s\)&lt;/span&gt; is called the 
&lt;em&gt;contravariant&lt;/em&gt; number. These terms refer to the number of dual vectors and vectors respectively, since vectors are typically
considered contravariant. Similar terms refer to &lt;em&gt;lower&lt;/em&gt; and &lt;em&gt;upper&lt;/em&gt; indices respectively.&lt;/p&gt;
&lt;p&gt;I should note that my exploration of these conventions is limited to differential geometry, relativity, and linear algebra texts. &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%&amp;#64;#$&amp;#64;#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%&amp;#64;#$&amp;#64;#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;hr&gt;
&lt;h3&gt;Bibliography&lt;/h3&gt;
&lt;p id='carrollSpacetimeGeometryIntroduction2013'&gt;Sean Carroll.
&lt;em&gt;Spacetime and &lt;span class="bibtex-protected"&gt;&lt;span class="bibtex-protected"&gt;Geometry&lt;/span&gt;&lt;/span&gt;: &lt;span class="bibtex-protected"&gt;&lt;span class="bibtex-protected"&gt;An Introduction&lt;/span&gt;&lt;/span&gt; to &lt;span class="bibtex-protected"&gt;&lt;span class="bibtex-protected"&gt;General Relativity&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Pearson Education&lt;/span&gt;, 3 edition, 2013. &lt;a class="cite-backref" href="#ref-carrollSpacetimeGeometryIntroduction2013-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='dasTensorsMathematicsRelativity2007'&gt;Anadijiban Das.
&lt;em&gt;Tensors: The Mathematics of Relativity Theory and Continuum Mechanics&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Springer&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;New York&lt;/span&gt;, 2007.
ISBN 978-0-387-69468-9 978-0-387-69469-6.
OCLC: ocm77795794. &lt;a class="cite-backref" href="#ref-dasTensorsMathematicsRelativity2007-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='hallLieGroupsLie2015'&gt;Brian&amp;nbsp;C. Hall.
&lt;em&gt;Lie Groups, &lt;span class="bibtex-protected"&gt;&lt;span class="bibtex-protected"&gt;Lie&lt;/span&gt;&lt;/span&gt; Algebras, and Representations: An Elementary Introduction&lt;/em&gt;.
Number&amp;nbsp;222 in Graduate Texts in Mathematics.
&lt;span class="bibtex-protected"&gt;Springer&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;Cham ; New York&lt;/span&gt;, second edition edition, 2015.
ISBN 978-3-319-13466-6.
OCLC: ocn910324548. &lt;a class="cite-backref" href="#ref-hallLieGroupsLie2015-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='jeevanjeeIntroductionTensorsGroup2015'&gt;Nadir Jeevanjee.
&lt;em&gt;An Introduction to Tensors and Group Theory for Physicists&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Springer Science+Business Media&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;New York, NY&lt;/span&gt;, 2015.
ISBN 978-3-319-14793-2. &lt;a class="cite-backref" href="#ref-jeevanjeeIntroductionTensorsGroup2015-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='langLinearAlgebra1987'&gt;Serge Lang.
&lt;em&gt;Linear Algebra&lt;/em&gt;.
Undergraduate Texts in Mathematics.
&lt;span class="bibtex-protected"&gt;Springer-Verlag&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;New York&lt;/span&gt;, 3rd ed edition, 1987.
ISBN 978-0-387-96412-6. &lt;a class="cite-backref" href="#ref-langLinearAlgebra1987-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='leeIntroductionSmoothManifolds2013'&gt;John&amp;nbsp;M. Lee.
&lt;em&gt;Introduction to Smooth Manifolds&lt;/em&gt;.
Number&amp;nbsp;218 in Graduate Texts in Mathematics.
&lt;span class="bibtex-protected"&gt;Springer&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;New York ; London&lt;/span&gt;, 2nd ed edition, 2013.
ISBN 978-1-4419-9981-8 978-1-4419-9982-5.
OCLC: ocn800646950. &lt;a class="cite-backref" href="#ref-leeIntroductionSmoothManifolds2013-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='misnerGravitation2017'&gt;Charles&amp;nbsp;W. Misner, Kip&amp;nbsp;S. Thorne, John&amp;nbsp;Archibald Wheeler, and David Kaiser.
&lt;em&gt;Gravitation&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Princeton University Press&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;Princeton, N.J&lt;/span&gt;, 2017.
ISBN 978-0-691-17779-3.
OCLC: on1006427790. &lt;a class="cite-backref" href="#ref-misnerGravitation2017-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='poissonRelativistToolkitMathematics2004'&gt;Eric Poisson.
&lt;em&gt;A Relativist's Toolkit: The Mathematics of Black-Hole Mechanics&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Cambridge University Press&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;Cambridge, UK ; New York&lt;/span&gt;, 2004.
ISBN 978-0-521-83091-1. &lt;a class="cite-backref" href="#ref-poissonRelativistToolkitMathematics2004-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='rentelnManifoldsTensorsForms2014'&gt;Paul Renteln.
&lt;em&gt;Manifolds, Tensors, and Forms: An Introduction for Mathematicians and Physicists&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Cambridge University Press&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;Cambridge, UK ; New York&lt;/span&gt;, 2014.
ISBN 978-1-107-04219-3. &lt;a class="cite-backref" href="#ref-rentelnManifoldsTensorsForms2014-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='romanAdvancedLinearAlgebra2007'&gt;Steven Roman.
&lt;em&gt;Advanced Linear Algebra&lt;/em&gt;.
Number&amp;nbsp;135 in Graduate Texts in Mathematics.
&lt;span class="bibtex-protected"&gt;Springer&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;New York&lt;/span&gt;, 3rd ed edition, 2007.
ISBN 978-0-387-72828-5. &lt;a class="cite-backref" href="#ref-romanAdvancedLinearAlgebra2007-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='spivakComprehensiveIntroductionDifferential1999'&gt;Michael Spivak.
&lt;em&gt;A Comprehensive Introduction to Differential Geometry&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Publish or Perish, Inc&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;Houston, Tex&lt;/span&gt;, 3rd ed edition, 1999.
ISBN 978-0-914098-70-6 978-0-914098-71-3 978-0-914098-72-0 978-0-914098-73-7 978-0-914098-74-4.
OCLC: ocm42962004. &lt;a class="cite-backref" href="#ref-spivakComprehensiveIntroductionDifferential1999-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='tuDifferentialGeometryConnections2017'&gt;Loring&amp;nbsp;W. Tu.
&lt;em&gt;Differential Geometry: Connections, Curvature, and Characteristic Classes&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Springer Science+Business Media&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;New York, NY&lt;/span&gt;, 2017.
ISBN 978-3-319-55082-4. &lt;a class="cite-backref" href="#ref-tuDifferentialGeometryConnections2017-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Kennington</dc:creator><pubDate>Tue, 23 Apr 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2019-04-23:/blog/tensor-type-notation/</guid><category>Maths</category><category>maths</category><category>tensors</category><category>notation</category></item><item><title>Tensor Product for Programmers</title><link>/blog/tensor-product-for-programmers/</link><description>&lt;p&gt;The introduction to tensor products and tensor algebras is often riddled with rigor, in which a mathematician would delight but a programmer would despair. I find myself in the intersection of these camps and while I appreciate notation, a simpler introduction is possible using functional programming concepts. &lt;/p&gt;
&lt;p&gt;Tensors are defined and introduced in two equivalent ways. The first way, called the "expansion coefficient" (or array) style of introducing tensors relies on many indices and iterates over the n dimensions of some array (n-dimensional generalization of a matrix) &lt;a href='#wikipediaTensorMultidimensionalArrays2019' id='ref-wikipediaTensorMultidimensionalArrays2019-1'&gt;Wikipedia (2019)&lt;/a&gt;. I have found this approach to be overly cluttered; missing the forest for the trees. Instead, I prefer the second way of defining tensors, namely as "multilinear maps" &lt;a href='#romanAdvancedLinearAlgebra2007' id='ref-romanAdvancedLinearAlgebra2007-1'&gt;Roman (2007)&lt;/a&gt; &lt;a href='#jeevanjeeIntroductionTensorsGroup2015' id='ref-jeevanjeeIntroductionTensorsGroup2015-1'&gt;Jeevanjee (2015)&lt;/a&gt;. This technique focuses on functions and interfaces, as opposed to components, and will be the chosen method of explaining below. &lt;/p&gt;
&lt;p&gt;Before we begin, a brief note about preferences between the "coefficient" and "multilinear" approaches. The latter way has found greater resonance with mathematicians, while programmers often find the former more comforting. I believe this is caused by an over-reliance on data structures as atomic units of understanding. True, it is natural as a developer to ask "but what &lt;em&gt;is&lt;/em&gt; the object"; however, using more functional-programming style of thought, the multilinear map approach is actually simpler! No need to keep track of various coefficients on various axes of some imaginary n-dimensional array (leave that to &lt;code&gt;numpy&lt;/code&gt;). In the below, I outline a functional-programming style analogy for tensors, and the tensor product. Thought the below snippets are in python, some details are left to the imagination (i.e. this code is not a script).&lt;/p&gt;
&lt;h3&gt;Setting the Stage&lt;/h3&gt;
&lt;p&gt;Before we get to define tensors, we need to briefly define a few building blocks. First, there is a field &lt;span class="math"&gt;\(C\)&lt;/span&gt;, commonly the reals &lt;span class="math"&gt;\(\mathbb{R}\)&lt;/span&gt;, occasionally the complex numbers &lt;span class="math"&gt;\(\mathbb{C}\)&lt;/span&gt;. Members of &lt;span class="math"&gt;\(C\)&lt;/span&gt; are called &lt;em&gt;scalars&lt;/em&gt; and are represented in the code by the type &lt;code&gt;scalar&lt;/code&gt;. Second, there are vector spaces &lt;span class="math"&gt;\(V\)&lt;/span&gt; over this field, with the usual properties of closure under addition and scalar multiplication. Elements of &lt;span class="math"&gt;\(V\)&lt;/span&gt; are of type &lt;code&gt;vector&lt;/code&gt;. Note, I am not specifying a vector as a tuple of scalars - though that is a valid vector space, there are others based on non-tuple like entities, like the vector space of square-integrable functions! The last piece of machinery is the dual space &lt;span class="math"&gt;\(V^*\)&lt;/span&gt;. If you're not familiar with the dual space, it is essentially the set of all linear functions that take 1 vector and spit out a scalar (specifically &lt;span class="math"&gt;\(V^* = \{f: V\rightarrow C\}\)&lt;/span&gt; where &lt;span class="math"&gt;\(f\)&lt;/span&gt; is linear). Elements of &lt;span class="math"&gt;\(V^*\)&lt;/span&gt; are of type &lt;code&gt;dual&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Some dual vectors&lt;/h4&gt;
&lt;p&gt;Recall that dual vectors are functions that take a vector and return a scalar. Let &lt;span class="math"&gt;\(f, g \in V^*\)&lt;/span&gt;. In code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Tensor Product&lt;/h4&gt;
&lt;p&gt;Now let's define the tensor product of &lt;span class="math"&gt;\(f\)&lt;/span&gt; and &lt;span class="math"&gt;\(g\)&lt;/span&gt; as &lt;span class="math"&gt;\(h = f \otimes g\)&lt;/span&gt;. What this amounts to, is combining the functional interface into a new, single tensor (function), that curries to the functions it was made from! Specifically:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In some sense, the tensor (or outer) product is like a concatenation operation, that joins functions together, using the superset of arguments, and passing those arguments back to the original functions returning a scalar! This definition is easy!&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%&amp;#64;#$&amp;#64;#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%&amp;#64;#$&amp;#64;#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;hr&gt;
&lt;h3&gt;Bibliography&lt;/h3&gt;
&lt;p id='jeevanjeeIntroductionTensorsGroup2015'&gt;Nadir Jeevanjee.
&lt;em&gt;An Introduction to Tensors and Group Theory for Physicists&lt;/em&gt;.
&lt;span class="bibtex-protected"&gt;Springer Science+Business Media&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;New York, NY&lt;/span&gt;, 2015.
ISBN 978-3-319-14793-2. &lt;a class="cite-backref" href="#ref-jeevanjeeIntroductionTensorsGroup2015-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='romanAdvancedLinearAlgebra2007'&gt;Steven Roman.
&lt;em&gt;Advanced Linear Algebra&lt;/em&gt;.
Number&amp;nbsp;135 in Graduate Texts in Mathematics.
&lt;span class="bibtex-protected"&gt;Springer&lt;/span&gt;, &lt;span class="bibtex-protected"&gt;New York&lt;/span&gt;, 3rd ed edition, 2007.
ISBN 978-0-387-72828-5. &lt;a class="cite-backref" href="#ref-romanAdvancedLinearAlgebra2007-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='wikipediaTensorMultidimensionalArrays2019'&gt;Wikipedia.
Tensor, as multidimensional arrays.
&lt;em&gt;Wikipedia&lt;/em&gt;, April 2019. &lt;a class="cite-backref" href="#ref-wikipediaTensorMultidimensionalArrays2019-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Kennington</dc:creator><pubDate>Mon, 15 Apr 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2019-04-15:/blog/tensor-product-for-programmers/</guid><category>Maths</category><category>maths</category><category>tensors</category></item><item><title>TSAPS Spring Meeting</title><link>/blog/tsaps-spring-meeting/</link><description>&lt;p&gt;Three hours south east of Dallas, Physicists gathered at Stephen F. Austin university in Nacogdoches to discuss recent developments in the field. They weren't alone, though. The meeting was shared between the APS, AAPT, and SPS - so if you were interested in physics research, studying physics, or teaching physics, there was something there that could hold your attention. For me, there were a couple talks related to astrophysics that seemed worth the drive; I hit the road early Friday morning to arrive in time for the first talk. &lt;/p&gt;
&lt;p&gt;Dr. Billy Quarles' talk, &lt;em&gt;Potential for Exoplanetary Neighbors in Alpha Centauri&lt;/em&gt;, included a brief discussion of methodologies used to detect exoplanets. Though Quarles and his collaborators recent work seemed to focus mostly in RV techniques, the discussion on photometric methods was particularly interesting. The way that he presented the problem seemed to lend itself naturally to some geometric tricks that would allow for closed-form solutions to the intensity of the star during an exoplanet transit. I am drafting an analysis of these tricks presently, and will update this post with a link once complete - however the sketch goes something like this:&lt;/p&gt;
&lt;p&gt;Let an exoplanet of mass &lt;span class="math"&gt;\(m\)&lt;/span&gt; orbit a star of mass &lt;span class="math"&gt;\(M\)&lt;/span&gt; (clearly, &lt;span class="math"&gt;\(m &amp;lt; M\)&lt;/span&gt;). The ellipticity of this orbit isn't immediately important, since we're going to make a few simplifying assumptions. First we use &lt;span class="math"&gt;\(T \cup \mathcal{O}(3)\)&lt;/span&gt; invariance of the trajectory geometry to align the orbital plane with the &lt;span class="math"&gt;\(x\)&lt;/span&gt; - &lt;span class="math"&gt;\(y\)&lt;/span&gt; plane in &lt;span class="math"&gt;\(\mathcal{R}^3\)&lt;/span&gt;. We also choose to align the orbital angular momentum &lt;span class="math"&gt;\(L\)&lt;/span&gt; with the &lt;span class="math"&gt;\(z\)&lt;/span&gt; axis of &lt;span class="math"&gt;\(\mathcal{R}^3\)&lt;/span&gt;. Next, we choose a reference point &lt;span class="math"&gt;\(p\)&lt;/span&gt; along the &lt;span class="math"&gt;\(x\)&lt;/span&gt; axis to serve as the "observer". When the observer is sufficiently far from the planetary system, as the Earth is from even our nearest  neighboring system, then we may approximate the path of the light exiting the system as a projection along the &lt;span class="math"&gt;\(x\)&lt;/span&gt; axis into the &lt;span class="math"&gt;\(y\)&lt;/span&gt; - &lt;span class="math"&gt;\(z\)&lt;/span&gt; plane, namely &lt;span class="math"&gt;\(\pi_{1}: \mathcal{R}^3 \rightarrow \mathcal{R}^2\)&lt;/span&gt; defined by &lt;span class="math"&gt;\(\pi_{1}(x, y, z) = (y, z)\)&lt;/span&gt;. This assumption allows us to reduce the problem of intersecting volumes to one of intersecting areas! The remaining geometric problem can thus be stated: Given two circles &lt;span class="math"&gt;\(S_{p1}^1(r_1)\)&lt;/span&gt; and &lt;span class="math"&gt;\(S_{p_2}^1(r_2)\)&lt;/span&gt;, where the centers &lt;span class="math"&gt;\(p_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(p_2\)&lt;/span&gt; are represented as smooth functions of time &lt;span class="math"&gt;\(\alpha_1(t)\)&lt;/span&gt; and &lt;span class="math"&gt;\(\alpha_2(t)\)&lt;/span&gt;, give the intersectional area &lt;span class="math"&gt;\(A_{\cap}(t)\)&lt;/span&gt; as a function of time. The intensity of the star during transit will be proportional to this function to a first order.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Kennington</dc:creator><pubDate>Tue, 12 Mar 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2019-03-12:/blog/tsaps-spring-meeting/</guid><category>Physics</category><category>physics</category><category>conference</category></item><item><title>Mass of Sound waves</title><link>/blog/mass-of-sound-waves/</link><description>&lt;p&gt;A recent article published in Physical Review B by &lt;a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.97.134516"&gt;Nicolis and Penco&lt;/a&gt;
arrives at an unconventional physical assertion: that non-relativistic sound waves carry gravitational mass.&lt;/p&gt;
&lt;p&gt;This claim should sound odd to anyone who has taken an undergraduate mechanics course, as one of the first physical assertions
about waves is that they transport energy &lt;em&gt;through&lt;/em&gt; matter (which possesses gravitational mass), but not having any
mass of it's own. The original paper focuses on the focused effect of such behavior on condensed matter solids, though
they authors assert the result is more general.&lt;/p&gt;
&lt;p&gt;If we assume their result to be true, then I find the following train of thought interesting. Given a sound wave propagating through
a solid that itself possesses gravitational mass, to what extent do the sound wave and the medium interact gravitationally? Are 
there any circumstances (very "loose" media, such as IGM) under which that interaction would play an important role in the dynamics
of the resulting wave? &lt;/p&gt;
&lt;p&gt;Though the above questions are tempting - I'll wait until Nicolis and Penco either experimentally observe their proposed effect,
or can present a more general version of their initial results. Either way - interesting!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Kennington</dc:creator><pubDate>Tue, 05 Mar 2019 00:00:00 -0600</pubDate><guid isPermaLink="false">tag:None,2019-03-05:/blog/mass-of-sound-waves/</guid><category>Physics</category><category>physics</category><category>waves</category></item></channel></rss>